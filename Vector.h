#pragma once

#ifndef VECTOR_H_
#define VECTOR_H_

//global interrupts are disabled
#ifdef __cplusplus
#define ISRv(vector, ...) extern "C" void vector (void) __attribute__ ((signal,__INTR_ATTRS)) __VA_ARGS__;
#else
#define ISRv(vector, ...) void vector (void) __attribute__ ((signal,__INTR_ATTRS)) __VA_ARGS__;
#endif

//global interrupts are disabled
//Use this attribute on the AVR to indicate that the specified function is an interrupt handler.The compiler will generate function entryand exit sequences suitable for use in an interrupt handler when this attribute is present.
//See also the interrupt function attribute.
//
//The AVR hardware globally disables interrupts when an interrupt is executed.Interrupt handler functions defined with the signal attribute do not re - enable interrupts.It is save to enable interrupts in a signal handler.This “save” only applies to the code generated by the compiler and not to the IRQ - layout of the application which is responsibility of the application.
//
//If both signal and interrupt are specified for the same function, signal will be silently ignored.
#ifdef __cplusplus
#define noninterruptable_vector(vector, ...) extern "C" void vector (void) __attribute__ ((signal,__INTR_ATTRS)) __VA_ARGS__;
#else
#define noninterruptable_vector(vector, ...) void vector (void) __attribute__ ((signal,__INTR_ATTRS)) __VA_ARGS__;
#endif

//global interrupts are enabled
//Note, on the AVR, the hardware globally disables interrupts when an interrupt is executed. The first instruction of an interrupt handler declared with this attribute will be a SEI instruction to re-enable interrupts. See also the signal function attribute that does not insert a SEI instuction. If both signal and interrupt are specified for the same function, signal will be silently ignored.
#ifdef __cplusplus
#define interruptable_vector(vector, ...) extern "C" void vector (void) __attribute__ ((interrupt,__INTR_ATTRS)) __VA_ARGS__;
#else
#define interruptable_vector(vector, ...) void vector (void) __attribute__ ((interrupt,__INTR_ATTRS)) __VA_ARGS__;
#endif

#define ISRf(vector, ...) void vector (void)

#endif